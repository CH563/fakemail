---
import '@/styles/globals.css';
import { SEO } from 'astro-seo';
const { pathname, origin } = Astro.url;
const resolvedImageWithDomain = `${origin}/image.png`;
const canonicalURL = new URL(pathname, origin);
const { title, description, image } = Astro.props;
const headTitle = title || 'FakeMail';
const headDesc =
    description ||
    'Fake email generator, delete emails 2 hours after receiving';
const ogImage = image || resolvedImageWithDomain;
---

<!doctype html>
<html lang='en'>
    <head>
        <meta charset='UTF-8' />
        <meta name='viewport' content='width=device-width' />
        <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
        <meta
            name='keywords'
            content='fake, temp mail, fake mail, free, temporary, email, disposable, mail, email address'
        />
        <meta name='generator' content={Astro.generator} />
        <SEO
            title={headTitle}
            description={headDesc}
            canonical={canonicalURL}
            twitter={{
                creator: '@LiWen563',
                site: '@LiWen563',
                card: 'summary_large_image',
                imageAlt: headTitle,
                description: headDesc,
            }}
            openGraph={{
                basic: {
                    url: canonicalURL,
                    type: 'website',
                    title: headTitle,
                    image: ogImage,
                },
                image: {
                    url: ogImage,
                    alt: headTitle,
                },
            }}
        />
        <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4182383692865291" crossorigin="anonymous"></script>
    </head>
    <body>
        <slot />
    </body>
</html>

<script is:inline>
    const getThemePreference = () => {
        if (
            typeof localStorage !== 'undefined' &&
            localStorage.getItem('theme')
        ) {
            return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'light';
    };
    const isDark = getThemePreference() === 'dark';
    document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

    if (typeof localStorage !== 'undefined') {
        const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains('dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['class'],
        });
    }
</script>
