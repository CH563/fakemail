---
import Layout from '@/layouts/Layout.astro';
import Bar from '@/components/Bar.astro';
import Mail from '@/components/mail/Mail';
import type { MailsList } from '@/components/mail/data';
const layout = Astro.cookies.get("react-resizable-panels:layout:mail");
const collapsed = Astro.cookies.get("react-resizable-panels:collapsed");
const defaultLayout = layout ? JSON.parse(layout.value) : undefined;
const defaultCollapsed = collapsed ? JSON.parse(collapsed.value) : undefined;
const { userId } = Astro.locals.auth();
const accounts: {id: number; email_address: string}[] = [];
const mails: MailsList[] = [];
if(Astro.locals.runtime) {
    const { env } = Astro.locals.runtime;
    const stmt = env.MAIL_DB.prepare("SELECT id,email_address FROM user_email_addresses WHERE user_id = ?").bind(userId);
    const returnValue = await stmt.run().catch((e) => {
        console.error(e);
        return { results: [] };
    });
    if (returnValue.results.length) {
        for(const row of returnValue.results) {
            accounts.push({
                id: row.id as number,
                email_address: row.email_address as string
            });
        }
        const stmt2 = env.MAIL_DB.prepare("SELECT e.message_id, e.subject, e.sender, e.body_text, e.body_html, e.received_at, es.is_read FROM emails e JOIN email_status es ON es.email_id = e.id WHERE user_email_id = ? ORDER BY received_at DESC").bind(accounts[0].id);
        const returnMails = await stmt2.run().catch((e) => {
            console.error(e);
            return { results: [] };
        });
        for(const row of returnMails.results) {
            mails.push({
                message_id: row.message_id as string,
                subject: row.subject as string,
                sender: row.sender as string,
                content: (row.body_text || row.body_html) as string,
                received_at: row.received_at as string,
                is_read: row.is_read as number
            });
        }
    }
}
---

<Layout>
    <div class="flex flex-col h-screen">
        <Bar />
        {accounts.length === 0 ?
            <div class="flex-1 flex items-center justify-center">
                <div class="text-center">
                    <h2 class="text-2xl font-bold">No Email Accounts</h2>
                    <p class="text-gray-500">You have not created any email accounts yet.</p>
                    <a href="/settings" class="text-blue-500 hover:underline">Add Email Account</a>
                </div>
            </div>:
            <Mail
                accounts={accounts}
                mails={mails}
                defaultLayout={defaultLayout}
                defaultCollapsed={defaultCollapsed}
                navCollapsedSize={4}
                client:load
            />
        }
    </div>
</Layout>